import aiohttp
from aiogram import Router, F, html
from aiogram.types import Message, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext

from states.main import MainStates
from database import create_category, get_category, get_categories

router = Router()


@router.message(MainStates.idle, F.text=="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def idle_category(message: Message, state: FSMContext):
    await state.set_state(MainStates.idle_category)
    kb = ReplyKeyboardBuilder().add(
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), KeyboardButton(text="–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    ).add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    kb.adjust(2,1)
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª", reply_markup=kb.as_markup(resize_keyboard=True))

@router.message(MainStates.idle_category, F.text=="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: Message, state: FSMContext):
    await state.set_state(MainStates.add_category)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ: <b>–∏–º—è</b> –∏–ª–∏ <b>–∏–º—è, parent_id</b>\n"
        "–ü—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, 3",
        parse_mode="HTML"
    )

@router.message(MainStates.add_category)
async def add_category_done(message: Message, state: FSMContext):
    parts = [p.strip() for p in message.text.split(",")]
    name = parts[0]
    parent = int(parts[1]) if len(parts)>1 and parts[1].isdigit() else None
    uid = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
    if parent:
        if not get_category(uid, parent):
            return await message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è #{parent} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    cat_id = create_category(uid, name, parent)
    await state.set_state(MainStates.idle_category)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: #{cat_id} {name}")


@router.message(MainStates.idle_category, F.text=="–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def list_categories(message: Message, state: FSMContext):
    uid = message.from_user.id
    rows = get_categories(uid)
    if not rows:
        return await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    lines = ["<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>"]
    for r in rows:
        pid = r['parent_category_id']
        lines.append(f"#{r['category_id']} {r['name']}" + (f" (–¥–æ—á–µ—Ä–Ω–µ–µ –æ—Ç #{pid})" if pid else ""))
    await message.answer("\n".join(lines), parse_mode="HTML")