import aiohttp
from aiogram import Router, F, html
from aiogram.types import Message, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext

from states.main import MainStates
from database import create_tag, get_tags

router = Router()


@router.message(MainStates.idle, F.text=="–¢–µ–≥–∏")
async def idle_tag(message: Message, state: FSMContext):
    await state.set_state(MainStates.idle_tag)
    kb = ReplyKeyboardBuilder().add(
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"), KeyboardButton(text="–ú–æ–∏ —Ç–µ–≥–∏")
    ).add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    kb.adjust(2,1)
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–¢–µ–≥–∏¬ª", reply_markup=kb.as_markup(resize_keyboard=True))

@router.message(MainStates.idle_tag, F.text=="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥")
async def add_tag_start(message: Message, state: FSMContext):
    await state.set_state(MainStates.add_tag)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞:")

@router.message(MainStates.add_tag)
async def add_tag_done(message: Message, state: FSMContext):
    name = message.text.strip()
    uid = message.from_user.id
    tag_id = create_tag(uid, name)
    await state.set_state(MainStates.idle_tag)
    await message.answer(f"‚úÖ –¢–µ–≥ —Å–æ–∑–¥–∞–Ω: #{tag_id} {name}")

@router.message(MainStates.idle_tag, F.text=="–ú–æ–∏ —Ç–µ–≥–∏")
async def list_tags(message: Message, state: FSMContext):
    uid = message.from_user.id
    rows = get_tags(uid)
    if not rows:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–≥–æ–≤.")
    lines = ["<b>üè∑Ô∏è –¢–µ–≥–∏:</b>"]
    for r in rows:
        lines.append(f"#{r['tag_id']} {r['name']}")
    await message.answer("\n".join(lines), parse_mode="HTML")