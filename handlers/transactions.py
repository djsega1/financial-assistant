import datetime
from aiogram import Router, F, html
from aiogram.types import Message, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext

from states.main import MainStates
from database import get_account, get_category, report_month, add_transaction, get_transactions
from utils.main import *

router = Router()


@router.message(MainStates.idle, F.text=="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def idle_tx(message: Message, state: FSMContext):
    await state.set_state(MainStates.idle_transaction)
    kb = ReplyKeyboardBuilder().add(
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ö–æ–¥"), KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    ).add(
        KeyboardButton(text="–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"), KeyboardButton(text="–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü")
    ).add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    kb.adjust(2,2)
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏¬ª", reply_markup=kb.as_markup(resize_keyboard=True))

@router.message(MainStates.idle_transaction, F.text.startswith("–î–æ–±–∞–≤–∏—Ç—å"))
async def add_tx_start(message: Message, state: FSMContext):
    mode = "I" if "–ø—Ä–∏—Ö–æ–¥" in message.text.lower() else "E"
    await state.update_data(tx_type=mode)
    await state.set_state(MainStates.add_transaction)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ: <b>account_id, category_id, amount, –æ–ø–∏—Å–∞–Ω–∏–µ[, —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ ;]</b>\n"
        "–ü—Ä–∏–º–µ—Ä: 1, 3, 500.00, –û–±–µ–¥, –µ–¥–∞;—Ä–µ—Å—Ç–æ—Ä–∞–Ω",
        parse_mode="HTML"
    )

@router.message(MainStates.add_transaction)
async def add_tx_done(message: Message, state: FSMContext):
    data = await state.get_data()
    tx_type = data.get("tx_type")
    parts = [p.strip() for p in message.text.split(",")]
    if len(parts)<4:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 –ø–æ–ª—è.")
    try:
        account_id = int(parts[0])
        category_id = int(parts[1])
        amount = float(parts[2])
    except:
        return await message.answer("‚ùå account_id –∏ category_id ‚Äî —Ü–µ–ª—ã–µ, amount ‚Äî —á–∏—Å–ª–æ.")
    description = parts[3]
    tags = []
    if len(parts)>4:
        tags = [t.strip() for t in ",".join(parts[4:]).split(";") if t.strip()]
    uid = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not get_account(uid, account_id):
        return await message.answer(f"‚ùå –°—á–µ—Ç #{account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if not get_category(uid, category_id):
        return await message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    tx_id, err = add_transaction(uid, account_id, category_id, amount, tx_type, description, tags)
    if err:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {err}")
    else:
        await state.set_state(MainStates.idle_transaction)
        await message.answer(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{tx_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

@router.message(MainStates.idle_transaction, F.text=="–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def list_tx(message: Message, state: FSMContext):
    uid = message.from_user.id
    rows = get_transactions(uid)
    if not rows:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
    await message.answer(fmt_transactions(rows), parse_mode="HTML")

@router.message(MainStates.idle_transaction, F.text=="–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü")
async def ask_report_month(message: Message, state: FSMContext):
    await state.set_state(MainStates.wait_report_month)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü <code>YYYY-MM</code> –¥–ª—è –æ—Ç—á—ë—Ç–∞:", parse_mode="HTML")

@router.message(MainStates.wait_report_month)
async def report_month_done(message: Message, state: FSMContext):
    txt = message.text.strip()
    try:
        datetime.datetime.strptime(txt, "%Y-%m")
    except:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç YYYY-MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 2025-04. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    uid = message.from_user.id
    rows = report_month(uid, txt)
    if not rows:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {txt}.")
    else:
        inc = [r for r in rows if r['type']=='I']
        exp = [r for r in rows if r['type']=='E']
        out = [f"<b>üìä –û—Ç—á—ë—Ç –∑–∞ {txt}</b>\n"]
        out.append("<b>‚ûï –ü—Ä–∏—Ö–æ–¥—ã:</b>")
        out += [f"{r['category']}: {r['sum_amount']:.2f}" for r in inc] or ["‚Äî"]
        out.append("\n<b>‚ûñ –†–∞—Å—Ö–æ–¥—ã:</b>")
        out += [f"{r['category']}: {r['sum_amount']:.2f}" for r in exp] or ["‚Äî"]
        await message.answer("\n".join(out), parse_mode="HTML")
